def _process_goalkeeper(
        self, field: fld.Field, ball: aux.Point, attacker: aux.Point, goalkeeper: aux.Point, pass_receiver, list_enemy: list[aux.Point]
    ) -> tuple[aux.Point, float, wp.WType]:
        """
        Обрабатывает логику вратаря:
          - Если противник близко к мячу, рассчитываем траекторию спасения;
          - Если противник далеко, корректируем позицию вратаря в зависимости от положения мяча.
        Также обрабатывается ситуация, когда мяч движется в зоне ворот.
        """
        # Если противник близко к мячу (готовится к удару)
        if False:
            pos = aux.closest_point_on_line(attacker, ball, goalkeeper, "R")
            cords1 = aux.get_line_intersection(attacker, ball, field.ally_goal.up, field.ally_goal.down, "LL")
            if cords1 is not None:
                result = aux.get_line_intersection(
                    ball,
                    cords1,
                    field.ally_goal.frw_up - field.ally_goal.eye_forw,
                    field.ally_goal.center_up,
                    "LS",
                )
                if result is aux.Point:
                    result = aux.get_line_intersection(
                        ball,
                        cords1,
                        field.ally_goal.frw_down - field.ally_goal.eye_forw,
                        field.ally_goal.center_down,
                        "LS",
                    )

                    pos = aux.closest_point_on_line(result, cords1, goalkeeper, "S")
                    field.strategy_image.draw_line(result, cords1, (0, 0, 255), 5)
                    field.strategy_image.draw_line(pos, attacker, (0, 0, 255), 5)
                    if aux.dist(pos, self.prev_pos) > 80:
                        self.pos_holds_timer = time()
                    self.prev_pos = pos
                    if time() - self.pos_holds_timer < 1:
                        pos = field.ally_goal.center + field.ally_goal.eye_forw * 300
                    field.strategy_image.draw_dot(pos, (0, 0, 0), 40)
            self.ball_status = BallStatus.Ready
        else:
            # Если противник не у мяча
            pos = field.ally_goal.center + field.ally_goal.eye_forw * 300
            angle = field.enemy_goal.center.arg()

        # Если вратарь готов (мяч ранее отмечен как Ready) и противник далеко
        if field.ball.get_vel().mag() > 100:
            pos = aux.closest_point_on_line(self.old_ball, ball, goalkeeper, "R")
            cords1 = aux.get_line_intersection(self.old_ball, ball, field.ally_goal.up + field.ally_goal.eye_forw * 120, field.ally_goal.down  + field.ally_goal.eye_forw * 120, "LL")
            
            if cords1 is not None:
                cords_sr = cords1
                if not aux.is_point_inside_poly(ball, field.ally_goal.hull):
                    result = aux.get_line_intersection(
                        self.old_ball,
                        cords1,
                        field.ally_goal.frw_up - field.ally_goal.eye_forw,
                        field.ally_goal.frw_down - field.ally_goal.eye_forw,
                        "LL",
                    )
                    if result is None:
                        result = aux.get_line_intersection(
                                self.old_ball,
                                cords1,
                                field.ally_goal.frw_down - field.ally_goal.eye_forw * 1,
                                field.ally_goal.center_down + field.ally_goal.eye_forw * 120,
                                "LS",
                        )
                    if result is None:
                        result = aux.get_line_intersection(
                                self.old_ball,
                                cords1,
                                field.ally_goal.frw_up - field.ally_goal.eye_forw * 1,
                                field.ally_goal.center_up + field.ally_goal.eye_forw * 120,
                                "LL",
                            )
                    if result is None:
                        result = aux.get_line_intersection(
                                self.old_ball,
                                cords1,
                                field.ally_goal.frw_up - field.ally_goal.eye_forw * 1,
                                field.ally_goal.frw_down - field.ally_goal.eye_forw * 1,
                                "LL",
                            )

                    pos = aux.closest_point_on_line(result, cords1, goalkeeper, "S")
                    field.strategy_image.draw_line(result, cords1, (0, 0, 255), 5)
                    field.strategy_image.draw_line(field.ally_goal.up + field.ally_goal.eye_forw * 120, field.ally_goal.down  + field.ally_goal.eye_forw * 120, (0, 0, 255), 5)
                    field.strategy_image.draw_line(pos, self.old_ball, (0, 0, 255), 5)
                    field.strategy_image.draw_dot(pos, (0, 0, 0), 40)
            else:
                pos = field.ally_goal.center + field.ally_goal.eye_forw * 300
            if aux.is_point_inside_poly(ball, field.ally_goal.hull):
                self.ball_status_poly = BallStatusInsidePoly.InsidePoly

        # Если мяч остановился после удара в зоне ворот
        if field.is_ball_stop_near_goal():
            # Используем _pas для расчёта данных паса (здесь лишь для установки флага удара)
            pos = goalkeeper
            flag_to_kick_goalkeeper = wp.WType.S_ENDPOINT
        else:
            flag_to_kick_goalkeeper = wp.WType.S_ENDPOINT

        # Если мяч вылетел за зону ворот после удара
        if (
            self.ball_status_poly == BallStatusInsidePoly.InsidePoly
            and not aux.is_point_inside_poly(ball, field.ally_goal.hull)
        ):
            self.ball_status_poly = BallStatusInsidePoly.NotInsidePoly
            self.ball_status = BallStatus.Passive
            pos = field.ally_goal.center + field.ally_goal.eye_forw * 300

        # Если позиция вне зоны ворот, корректируем позицию и направление
        if not aux.is_point_inside_poly(pos, field.ally_goal.hull):
            pos = goalkeeper
            angle = field.enemy_goal.center.arg()
        else:
            angle = field.enemy_goal.center.arg()
        field.strategy_image.draw_dot(pos, (255, 0, 0), 40)
        self.old_pos = pos
        return pos, angle, flag_to_kick_goalkeeper